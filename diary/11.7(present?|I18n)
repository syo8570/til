本日もturbo_streamによる非同期通信の実装に関して勉強
以下、備忘録

1,present?を忘れていた

元々turboの素のままではエラーメッセージが表示されない。（最初に結構ハマっていた）

その場合、通常のrailsと同じ処理を行う場合にはコントローラ内で
renderに[status: :unprocessable_entity]と記述してエラーメッセージを表示させるようにする必要があったが、
ajax化する場合はそもそもこのrenderを無くしてしまうのでどうするんだろう、と考えていた。

バリデーションにpresentを使っているだけではエラーが出ないがどうするんだろうと思って調べていたところ
以前にも記述を見た事があるpresent?が出てきた

これは指定したobjectがpresentかどうかを識別し、存在すればtrueを、しない場合はfaultを返してくれるヘルパーメソッド
今回使用する必要に迫られたのはコメントの投稿機能

turbo_streamファイル内で if @comment.error.present? を記述する事で
エラーがある場合はエラーを表示、無い場合はそのまま表示とする事ができた



2,I18nの使用上の注意点

バリデーションで[present: message{ I18n.t('')}]という風にパスを書けばi18nの記述が出来ると思っていたのだけれど
実際にやってみるとなぜか
「コメントコメントを入力してください」
という風に、頭にコメントが一つ多く付いてしまった。

その時のパスはまず正常に動くか確認する意味でもGPTから提案された「activerecord.errors.models.comment.attributes.content.brank」にしていたんだけれど、
どうやらこの途中にある[comment]の部分が他の層にある[comment: 'コメント']とちょうど競合してしまっていたみたいで、
両方が出力されてしまった結果のようだった。

そして遠回りしていたのだが、どうやらデフォルトで内部に記述する設定の中に「brank: を入力してください」があり
どうやらこのcomment + brank を重ねて
「コメントを入力してください」という表示になる記述が既に存在していて
いざ一旦余計な部分を戻してみたところ、普通に「コメントを入力してください」という表示になってくれた

結果として、色々こねなくても
１、turbo_stram内でエラー表示をする記述をする事
２、バリデーションにpresent: trueを記述しておく事
を守っておけば、i18nが勝手にいいようにしてくれるみたい

今はここまでの知識にしておくが、今後はこの辺りも深掘りして理解を深めたい。


