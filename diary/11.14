本日は昨日までの課題の復習と
同期の方々との勉強会を実施

まずは復習に関して

１、form_withのURLオプションはここでも使われる

  実施していたform_withの内、一つの一文が以下になっていた
  <%= form_with model: @user, url: password_reset_path(@token), method: :patch do |f| %>

  まず先に、method: :patchという部分。
  これは言わずもがな送信する際の方法についての記述。
  patchは「これはupdateの管轄ですよ」という明記をしてくれている部分
  これでこのフォームを送信するとUPDATEリクエストとなり、コントローラーもUPDATEアクションが発火する
  
  modelはビューを管轄しているコントローラー内で定義した@userというインスタンスを指している。
  今回の定義は以下の通り
  @user = User.load_from_reset_password_token(@token)
  
  要約するとUserテーブルの中にあるreset_password_tokenを読み込んでね、参照先は@token(params[:id])だよ
  という風な指定をしている状態。これが[model: @user]という部分

  最後にurl: password_reset_path(@token)
  私の今までの認識では例えばcommentを送信するフォームで、その掲示板にそのコメントを表示するのかという事を指定するため
  comments_board_path(board)なんて風に書いていたような気がする

  その際はビュー画面に反映されたので直感的に理解していたが、今回はPWなので「？」となっていた
  ただ、改めて落ち着いて流れを考えると、結局のところどちらもDBの何かを更新する手段なので、そう考えるとほぼ同じ事をしていると言えた
  とはいえやはり手順は少し複雑なので、０からやれと言われても絶対に無理。今なら「こうだったかな〜」と辿れば・・・いやまだスムーズにはいけない気がする。
  

  コメントの時はboard_idを認識し、そのboard_idにコメントをアソシエーションする事でその掲示板にだけ表示するようにしていた

  このPWに関しては、事前に暗号化ID用のレコードであるreset_password_tokenカラムをuserテーブルに追加しておき
  PWの再発行依頼がされるとトークンが発行。
  １、トークンを提示されたEmail情報のユーザーのreset_password_tokenカラムへ登録
  ２、全く同じ文字列のトークンを指定されたユーザーのEmailへURLとして送信
  この二つを同時に行う。

  結果、URLへ接続すると特定のトークンURLへ飛び、
  そのビュー画面で新たなPWを入力すると、そのURLのトークンと全く同じreset_password_tokenを持つユーザーのPWを更新する、という流れだ。

  言葉にすればこの程度だけれど、ここにつながるまでの事前準備は初心者には中々大変だった。
  ただ、全体の流れと要素の意味は噛み砕いて飲み込めた感覚があるので、あとは場数を踏めば最適化される気がする。

  
  

  













