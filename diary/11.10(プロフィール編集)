本日の課題はプロフィール編集機能の実装
勘違いしていた部分も含め、復習としておさらいしていく

1.プロフィール実装にはコントローラーは必要だがモデルは不必要
2.resourceとresourcesの仕様と使い分け
3.updateメソッドの存在



1.プロフィール実装にはコントローラーは必要だがモデルは不必要

課題中に既にuser_session_controllerというモデル未実装のものは作っていたが、
今回の課題で改めて明記されていたので少し深掘り。

調べた結果の考え方として、小難しく書くと
モデルを実装しない場合の理由は主にデータベースを使用しない単純なページ表示や、外部APIなどのデータソースを直接扱う場合などにあるらしい。

ただ今回調べたかった部分とは少し違うのでより具体的な例として書くと、
今回のようにプロフィール編集を実装する場合、データベースは使用しない。

より正確に言うと、前提としてモデルの存在意義から考えておく必要がある。
モデルとはDBを操作してあげる時の制約やメソッドを定義しておく場所であり、データベースを使わないのであればそもそもが不必要となる。

今回実装するprofileは既に存在しているuserテーブルを編集する機能なので、
モデルは必要であればそのuserモデルへ記述するためprofileモデルは必要ないという訳だ。

書いてて少し分かりづらくなったので必要な所だけ切り取ると
modelを実装するのはDBを操作したいからであり、操作するDBが無いならmodelを実装する必要もない。


2.resourceとresourcesの仕様と使い分け

今まではとりあえず課題説明に則ってresourcesで作っておいたが、今回の課題ではresourceで作ろうと指定があった。
これは二つの違いを検索すると詳細を纏めてくださっている先人の記事が出るので簡潔に書く。

今回単数形の方を採用する理由は作成されるPATHが変わる為。
採用理由の部分を簡単に書くと、
resources：URLにIDを参照出来るようになる(board:id:showのように)
resource：URLにIDが参照出来なくなる
という違いがあるため。

この違いはセキュリティ的な部分と利便性で分ける必要があって、
IDを参照出来るということは、例えば掲示板を参照したい時にURLへそのIDを記述すれば、それだけで特定の掲示板と紐づいてアクセスすることが出来る。
掲示板であれば便利だが、これが例えばUser情報の方でも使えるようにしてしまうと、そのUser_IDをURL欄に記述すれば、そのUserのページにアクセス出来てしまうということになる。
実際はuser_id==IDのような制限をかけておけば一応大丈夫とはいえ、望ましい表示形態では無い。

その為、こうしてURLではID入力を使えないようにしておいて、別の方法で個人のIDを認識してプロフィールへアクセス出来るようにする事が大事。
今回はそれを@user = User.find(current_user.id)としてBefore_actionに呼び出しておく事で
プロフィール画面アクセス時にログインしているID情報を呼び出して表示する形に実装した。

ルーティングは他にもかなり奥が深いので、今後も機会がある度に少しずつ深掘りしていく。


3.updateメソッドの存在

最後の情報量は控えめ。
このメソッドがある事を単純に忘れていた。

情報のsaveやdestroyを指定するのは覚えていたが、
てっきり情報のアップデートをする時もsaveを使うかと思ってしまっていたので少しハマっていた。

結果としては単純で、編集を保存した結果updateアクションが発火するようにした状態なので（method: :patch）
これはsaveではなくupdateの方を記述しなければいけなかっただけだった。
save/new/destroy/update、忘れがちなので気をつけたい
頭に使用方法が染み込んで無いのでこれも今後理解を深めておきたい。

次はいよいよ他の方から難しすぎると散々嘆き節を窺っている
パスワードリセット機能を触っていく。

